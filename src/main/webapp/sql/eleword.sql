/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50018
Source Host           : localhost:3306
Source Database       : eleword

Target Server Type    : MYSQL
Target Server Version : 50018
File Encoding         : 65001

Date: 2014-04-01 07:14:20
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` bigint(20) NOT NULL auto_increment,
  `author` varchar(255) NOT NULL,
  `category_id` bigint(20) default NULL,
  `content` text NOT NULL,
  `keywords` varchar(255) default NULL,
  `modify_date` datetime default NULL,
  `post_date` datetime default NULL,
  `status` int(11) default NULL,
  `title` varchar(255) NOT NULL,
  `views` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('2', 'zhagnsan', '1', '<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">做为一个中年大叔，我已经很少上豆瓣了，一来不适应豆瓣的小清新和亚文化，二来是写微信平台后也没那么多时间。不过近期不断有读者反馈，说豆瓣有一篇书评牛头不对马嘴，是针对您的纸版《MacTalk·人生元编程》的。我以为是什么好玩的书评，结果费劲扒拉爬上豆瓣一看，尼玛，这哪有牛头和马嘴啊，分明就不是东西。所以有必要写点文字，以免读者被一篇垃圾文章误导。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">《MacTalk·人生元编程》最早成书是电子简版，分别在多看、豆瓣和 Kindle 市场上线，多看的评价和销量最好，Kindle 次之，豆瓣最差，不过也有160多人评价，评分8.2（</span><a href=\"http://read.douban.com/ebook/1531222/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://read.douban.com/ebook/1531222/</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\"> ）。豆瓣阅读的很多用户给了五星好评，也有给一星差评的，比如这个：</span> \r\n</p>\r\n<blockquote style=\"text-indent:2em;\">\r\n	<p>\r\n		<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">当做博文还可以接受，出书就没什么价值了。 观点没有深度，文字水准稀松，更没有特别突出迷人的精神气质。整本书给人一种散杂无序的感受，简而言之：毫无亮点，质量平平。</span> \r\n	</p>\r\n</blockquote>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">这种评价就很好，仁者见仁淫者见淫，有价值。但是我也就知道了，豆瓣用户的小清新风格和价值观和咱不是一路货色，所以也就很少在豆瓣写东西，也很少关注。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">但是这一篇（ </span><a href=\"http://book.douban.com/review/6577716/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://book.douban.com/review/6577716/</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\"> ）就有点意思了，书评的标题叫做《程序员有两种，很俗的和更俗的》。看了标题我就气不打一处来，特么的没有各类程序员研发和构建豆瓣和各种社区，你们这帮喷子去哪挥洒自己的青春去呢？如果这种无脑和人身攻击类型的评论放在微博或微信，哥早就小手一抖轻轻拉黑了，在这种事情上我从来都不是民主的。但是，豆瓣是一个开放的，自由的，平等的，宽容的，维护任何人用语言攻击别人权利的地方，那我就只能代表一部分程序员对丫说，去你爸爸的哥哥。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">关于「程序员」，我们生在了一个技术改变世界的时代，而程序员可能正在做着能够改变世界的技术，这是无上的荣耀和机遇。但是程序员这么拽，我们不说其他人会知道吗？所以总有一些程序员会出来写作、跳舞、歌唱、作画、奔跑、骑行，如果你以为程序员还是天天埋头在小黑屋编写无休止的代码而不出家门一步，那你离这个世界已经很远了，赶紧回火星去吧。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">王小波也是程序员出身，写出了传世的时代三部曲，这事您不知道吧？</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">关于「高端产品」，我在书中只是讲了苹果和 Mac 的部分历史和故事，包括 Mac 的使用和 各种 Tips，其他大部分都是技术和人文类文章，所以，如果您觉得 Apple I、Apple II 和 Macintosh是高端文艺产品的话，我只能说，前二者已经退休多年，而第三者，现在满大街都是！我们既不觉得 Mac 高端，也不觉得 Mac 文艺，也就是个好用的工具而已，如果您觉得，那只是因为你的海拔太低了。至于世界观，我觉得就您目前的状态，是不大可能上升到那个高度去谈问题了，三观已毁，何谈见解和观点？</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">关于「果粉」，这个词我还是很反感的，所以全书中从未出现过。粉丝本身就是不理智的，而程序员最要命的就是太理智了，所以很少和「粉」拉上关系，关于苹果的产品，我们只是觉得好用而已，而把自己觉得好的东西介绍给大家，至少不是坏事。所以，关于果粉这件事，我只能说，你才果粉，你们全家都果粉！</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">写到这我要对这位 XX 读者说一句：祝您一辈子在豆瓣写书评，别客气，恕不远送！</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<hr />\r\n<p>\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">最后我再正式的介绍一下这本书，内容取自书的序言：</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">这不是一本传统意义的 Mac 用户手册或技术书籍，没啥技术深度，思想也不深刻，只是一个70后程序员，在微信平台讲述技术与人文的故事，故事起于 Mac 而不止 Mac，时间线从七十年代贯穿至今。书中写了 Mac，说了苹果，聊了技术，侃了人生元编程，汇聚了我个人的经历和悲喜。您读完了，有收获就是好事，不用想的太多。如果书里在讲 Mac，那就是苹果公司的 Mac；如果在说Shell，那就是操作系统的Shell，如果在聊程序员，那就是你我身边的程序员。我尽量做到文字简单、内容有趣，因为简单和有趣也是一种力量，希望您读完这本书以后，也能拥有这种力量。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">纸书出版后，我想看到的各种效果，都已经看到了，至于书的销量，顺其自然就好，兄弟我吃饭不靠这个。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">利益相关：《MacTalk·人生元编程》作者。</span> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">豆瓣书评的原文：</span><a href=\"http://book.douban.com/review/6596765/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://book.douban.com/review/6596765/</span></a> \r\n</p>', null, '2014-04-01 07:06:41', '2014-02-13 21:50:22', '0', '读者有三种，一种普通的，一种文艺的，剩下极少数是 XX 的', '0');
INSERT INTO `article` VALUES ('3', 'zhagnsan', '3', '<p style=\"text-align:left;\">\r\n	<a href=\"http://macshuo.com/wp-content/uploads/2014/03/Go.jpg\"><img src=\"http://macshuo.com/wp-content/uploads/2014/03/Go.jpg\" alt=\"Go\" width=\"480\" height=\"302\" style=\"height:auto;\" /></a> \r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">最近琢磨着把我们的平台产品扔到 Docker 上试试，Docker 是运行在 Linux 上的一个轻量级的虚拟容器，简单来说就是 Docker 利用Linux 的 LXC（Linux Containers）和 CGroup 技术为你的应用构建了一个独立的、资源隔离的、轻量级的沙箱，你可以在里面自己动手，丰衣足食，无论怎么玩都不会对整个物理服务器产生影响。虽然 Docker 的政策是闭关锁国，但是你在开发环境和生产环境之间进行应用系统迁移和部署又十分方便。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">和传统虚拟机不同的是，Docker 容器并不会包含一个完整的操作系统，而是通过服务器现有的基础设施对资源进行管控的。基本原则就是，你以为自己是自由的，民主的，按需分配的，但其实你的配额是定量的，不作死就不会死的，当然也不排除你表现好的话，系统会再分一些资源给你。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">关于 Docker，如果大家有兴趣，我以后可以写个系列。今天主要想说说 Docker 的实现语言：Go。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">深入学习一门技术或框架的原则就是去读源代码，Docker 是 PaaS 提供商 DotCloud 开源的容器引擎，任何人都可以到 Github 上下载它的源代码。我拿到 Docker 的源代码后发现，好吧，人家大部分功能都是 Go 语言实现的。Go 语言威名远播，我虽早有耳闻，但却从未真正用过，正好借这个机会好好学习一下。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">顺便说一句，技术人员最苦逼的地方就是，当你想学 A 的时候，你发现的不得不先把 B 搞清楚，当你去搞 B 的时候，会牵扯出 C、D、E、F、G，七大姨八大姑和小舅子什么的都出来了，技术之间的依赖关系往往搞得你心烦意乱、心猿意马，最后你会忘记自己的初心是 A。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">所以，对于我这种高龄程序员，学完 Go 之后去搞别的并忘掉 Docker 的情况，也是完全可能出现的。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">目前编程语言排行榜前三位分别是 C、Java 和 Objective-C，这三门编程语言的 Ratings 都超过了10%，风头正劲。C 不用说了，Unix 和 Linux 都是这货写的，系统级编程语言，无可替代。OC 虽老，却属新贵，随着 iOS 大红大紫。唯有 Java，当年如日中天，如今却显老态，常常为人诟病。其实从语言的发展潜力来看，Java 还远远没有进入老年时代，最多是个中年大叔，语法糖虽弱，但整个 Java 平台博大精深，衍生语言 Scala 和 Groovy 生命力正盛。不过，由于 Java 平易近人的工业语言特点，常常遭到很多半瓶子醋的嘲笑，其实大部分是自嘲，能骂到点子上的少之又少。为什么骂 C 和Objective-C的少呢？因为能把 C 整明白的人大都知道深浅，至于 OC，大伙正忙着学呢，哪有空骂？</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">与其他语言不同，Go 生于名门望族 Google，一出生就是富二代。2009年11月 Google 正式对外发布 Go 1.0版本，从此宣告了一门新语言的诞生。Google 首席软件工程师罗布派克（Rob Pike）说：我们之所以开发 Go，是因为过去10多年间软件开发的难度令人沮丧。听了老罗这句话，台下很多程序员眼眶都湿润了。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Go 被誉为互联网时代的 C 语言，虽然目前声望还没法和那三位老大哥相比，但是程序员和极客们都对其寄予厚望。当然 Go 也没让大家失望，这几年发展迅猛，国内外很多厂家已经开始把 Go 语言用于生产环境，很多开源项目也开始用 Go 实现（比如 Docker）。最重要的一点是，据说 Go 的最佳开发平台是 OS X，其次是 Linux，最后是 Windows。这一点没什么可说的，因为我很早就说过，Mac 才是程序员的开发利器，Go 只是又一次印证了这一点而已。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">经过几个晚上的学习和实践，我觉得我会喜欢上这门语言，令人印象深刻的语言特性有这么几个：</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<ol>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Go 是一门系统级的编程语言，理论上 C 和 C++能干的事，Go 也干得出来，而且实现起来更加简单，如果 Go 愿意，也可以写个操作系统出来。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">支持 GC（垃圾收集），无论是 GC 还是引用计数，这部分的功能应该是现代编程语言必备的，我们最好相信编译器，而不是人。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">全新的静态类型语言，犯错的几率大大减少，同时具备动态语言的特性，无论是从 C、Java 或 Python 转过来都会感觉很舒服。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">针对并发、多核和大规模集群的语言，goroutine的设计相当有趣，这部分需要好好理解一下。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">更为丰富的内置数据类型，相对其他语言，增加了 map（字典）和 slice（数组切片），同时从语法层面进行了支持。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">函数的多重返回值，这一点是程序员们千呼万唤的功能，这次 Go 有了。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">基于关键字 defer、panic 和 recover 的异常处理机制，处理过程中使用了多重返回值的语法糖，defer 实现了类似 Java 里的 finally 功能，这部分的设计非常新颖。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">闭包，现代语言必备</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">无继承的接口方式，方法的定义和类型的定义可以在完全不同的地方进行，还可以为现有类型动态添加新的方法，这一点有点像 Objective-C 中的 Category ……</span>\r\n		</li>\r\n	</ol>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">一般来说，一种语言从诞生到广泛关注和应用，至少需要十年光景，而 Go 只用了几年时间就走到了这一步，着实令人惊叹。Go 诞生于网络、多核、高并发和大集群的时代，这是 Go 的机会，也可能是你我的机会。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Go，可以说是一门随风而起的语言，了解了 Go 之后，我们就知道，很多风口的东西，不一定是猪！</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">如果你也想试试这门语言，那么可以点击原文访问【Go 指南】，在线学习。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<a href=\"http://go-tour-zh.appspot.com/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://go-tour-zh.appspot.com</span></a>\r\n</p>', null, '2014-03-31 17:14:14', '2014-03-30 06:30:26', '0', 'Go，随风而起', '0');
INSERT INTO `article` VALUES ('4', 'zhagnsan', '3', '<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">一种思维方式影响了软件行业的发展。REST软件架构是当今世界上最成功的互联网的超媒体分布式系统。它让人们真正理解我们的网络协议HTTP本来面貌。它正在成为网络服务的主流技术，同时也正在改变互联网的网络软件开发的全新思维方式。AJAX技术和Rails框架把REST软件架构思想真正地在实际中很好表现出来。今天微软也已经应用REST并且提出把我们现有的网络变成为一个</span><a href=\"http://dannyayers.com/2007/05/01/astoria%E2%80%94microsoft-approaches\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">语义网</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">，这种网络将会使得搜索更加智能化。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与HTTP协议</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST软件架构是由Roy Thomas Fielding博士在2000年首次提出的。他为我们描绘了开发基于互联网的网络软件的蓝图。REST软件架构是一个抽象的概念，是一种为了实现这一互联网的超媒体分布式系统的行动指南。利用任何的技术都可以实现这种理念。而实现这一软件架构最著名的就是HTTP协议。通常我们把REST也写作为REST/HTTP，在实际中往往把REST理解为基于HTTP的REST软件架构，或者更进一步把REST和HTTP看作为等同的概念。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">今天，HTTP是互联网上应用最广泛的计算机协议。HTTP不是一个简单的运载数据的协议，而是一个具有丰富内涵的网络软件的协议。它不仅仅能够对于互联网资源进行唯一定位，而且还能告诉我们对于该资源进行怎样运作。这也是REST软件架构当中最重要的两个理念。而REST软件架构理念是真正理解HTTP协议而形成的。有了REST软件架构理念出现，才使得软件业避免了对HTTP协议的片面理解。只有正确的理论指导，才能避免在软件开发的实际工作过程中少走弯路。</span>\r\n</p>\r\n<div>\r\n</div>\r\n<div>\r\n	<div>\r\n		<div>\r\n			<p>\r\n				<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">相关厂商内容</span>\r\n			</p>\r\n			<div>\r\n				<h3>\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2707&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">侧重业务，引领技术；开放竞合，不忘初心——ArchSummit2014深圳站启动</span></a> \r\n				</h3>\r\n				<h3>\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2597&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">《面向网络游戏的大数据处理框架和挑战》 ——网易大数据高级研究员王健宗</span></a> \r\n				</h3>\r\n				<h3>\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2598&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">《从0到1：“英语流利说”MVP开发理念实践》：QCon北京移动专题</span></a> \r\n				</h3>\r\n				<h3>\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2741&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">第75期QClub：甲骨文技术沙龙（4月29日北京站、5月8日上海站）</span></a> \r\n				</h3>\r\n				<h3>\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2600&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">高德地图街景API发布，开放全部街景数据及功能(FREE)</span></a> \r\n				</h3>\r\n				<div>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div>\r\n	</div>\r\n</div>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与URI（资源定位）</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST软件架构之所以是一个超媒体系统，是因为它可以把网络上所有资源进行唯一的定位，不管你的文件是图片、文件Word还是视频文件，也不管你的文件是txt文件格式、xml文件格式还是其它文本文件格式。它利用支持HTTP的TCP/IP协议来确定互联网上的资源。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与CRUD原则</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST软件架构遵循了CRUD原则，该原则告诉我们对于资源（包括网络资源）只需要四种行为：创建（Create）、获取（Read）、更新（Update）和销毁（DELETE）就可以完成对其操作和处理了。其实世界万物都是遵循这一规律：生、变、见、灭。所以计算机世界也不例外。这个原则是源自于我们对于数据库表的数据操作：insert（生）、select（见）、update（变）和delete（灭），所以有时候CRUD也写作为RUDI，其中的I就是insert。这四个操作是一种原子操作，即一种无法再分的操作，通过它们可以构造复杂的操作过程，正如数学上四则运算是数字的最基本的运算一样。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与网络服务</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">尽管在Java语言世界中网络服务目前是以SOAP技术为主，但是REST将是是网络服务的另一选择，并且是真正意义上的网络服务。基于REST思想的网络服务不久的将来也会成为是网络服务的主流技术。REST不仅仅把HTTP作为自己的数据运输协议，而且也作为直接进行数据处理的工具。而当前的网络服务技术都需要使用其它手段来完成数据处理工作，它们完全独立于HTTP协议来进行的，这样增加了大量的复杂软件架构设计工作。REST的思想充分利用了现有的HTTP技术的网络能力。在德国电视台上曾经出现过一个这样的五十万欧元智力题：如何实现网络服务才能充分利用现有的HTTP协议？该问题给出了四个答案：去问微软；WSDL2.0/SOAP1.2；WS-Transfer；根本没有。这个问题告诉我们HTTP并不是一个简单的数据传来传去的协议，而是一个聪明的会表现自己的协议，这也许是REST = Representational State Transfer的真正含义。</span>\r\n</p>\r\n<div>\r\n</div>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">实际上目前很多大公司已经采用了REST技术作为网络服务，如Google、Amazon等。在Java语言中重要的两个以SOAP技术开始的网络服务框架XFire和Axis也把REST作为自己的另一种选择。它们的新的项目分别是</span><a href=\"http://cwiki.apache.org/confluence/display/CXF/Index\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Apache CXF&nbsp;</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">和</span><a href=\"http://ws.apache.org/axis2/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Axis2&nbsp;</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">。Java语言也制定关于REST网络服务规范：JAX-RS: Java API for RESTful Web Services (JSR 311)。相信还会出现更多与REST相关的激动人心的信息。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与AJAX技术</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">尽管AJAX技术的出现才不到两年时间，但是AJAX技术遵循了REST的一些重要原则。AJAX技术充分利用了HTTP来获取网络资源并且实现了HTTP没有的对于异步数据进行传输的功能。AJAX技术还使得软件更好地实现分布性功能，在一个企业内只要一个人下载了AJAX引擎，其它企业内部的人员，就可以共享该资源了。AJAX技术遵守REST准则的应用程序中简单和可伸缩的架构，凡是采用AJAX技术的页面简洁而又丰富，一个页面表现了丰富多彩的形态。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">AJAX技术还使用了一种不同于XML格式的JSON文件格式，这个意义在哪里呢？在REST软件架构下我们不能对于XML文件进行序列化处理，这样程序员必须要使用自己的XML绑定框架。而以序列化的JavaScript对象为基础的JSON已经获得了广泛认可，它被认为能以远比XML更好的方式来序列化和传输简单数据结构，而且它更简洁。这对REST是一个极大贡献和补充。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">当前的网络应用软件还违背了REST的“无状态服务器”约束。REST服务器只知道自己的状态。REST不关心客户端的状态，客户端的状态自己来管理，这是AJAX技术的应用之地。通过AJAX技术，可以发挥有状态网络客户机的优势。而REST的服务器关心的是从所有网络客户端发送到服务器操作的顺序。这样使得互联网这样一个巨大的网络得到有序的管理。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST与Rails框架</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Ruby on Rails框架（简称Rails或者Rails框架）是一个基于Ruby语言的越来越流行的网络应用软件开发框架。它提供了关于REST最好的支持，也是当今应用REST最成功的一个软件开发框架。Rails框架（从版本1.2.x起）成为了第一个引入REST作为核心思想的主流网络软件开发框架。在Rails框架的充分利用了REST软件架构之后，人们更加坚信REST的重要性和必要性。Rails利用REST软件架构思想对网络服务也提供了一流的支持。从最直观的角度看待REST，它是网络服务最理想的手段，但是Rails框架把REST带到了网络应用软件开发框架。这是一次飞跃，让REST的思想从网络服务的应用提升到了网络应用软件开发。利用REST思想的simply_restful插件已经成为了Rails框架的核心内容。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST安全性</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">我们把现有基于SOAP的网络服务和基于REST/HTTP网络服务作个比喻，前者是一种传统的寄信方式，而后者是现代网络的电子邮件方式。要是是寄信和电子邮件都有病毒存在的话，传统的寄信被送到对方就很危险，而电子邮件是开发的，电子邮件供应商比如Google为我们检查了电子邮件是否有病毒。这里并不是说明SOAP网络服务消息包含义病毒，而是说明HTTP是无法处理SOAP信息包究竟好不好，需要额外的软件工具解决这一问题，包括防火墙也用不上和管不了。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">REST/HTTP网络服务的信息包可以被防火墙理解和控制。你可以按照操作和链接进行过滤信息包，如你可以规定从外部来的只能读取（GET操作）自己服务器的资源。这样对于系统管理员而言使得软件管理更为简单。REST的安全性还可以利用传输安全协议SSL/TLS、基本和摘要式认证（Basic und Digest Authentication）。除了这些REST自身的安全性功能外，还可以利用像基于信息的Web Services Security（JSR 155）作为REST不错的补充。</span>\r\n</p>\r\n<h4 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">参考文献</span>\r\n</h4>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">中文参考文献</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<a href=\"http://www.ibm.com/developerworks/cn/web/wa-ajaxarch/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://www.ibm.com/developerworks/cn/web/wa-ajaxarch/</span></a><br />\r\n<span style=\"line-height:1.5;font-size:14px;font-family:\'Microsoft YaHei\';\">&nbsp; &nbsp; &nbsp;&nbsp;</span><a href=\"http://www.ibm.com/developerworks/cn/java/j-cb08016/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://www.ibm.com/developerworks/cn/java/j-cb08016/</span></a><br />\r\n<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Roy Thomas Fielding博士论文中文版本</span>\r\n</p>\r\n<ul>\r\n	<li>\r\n		<a href=\"http://e2c.91yee.com/columns/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://e2c.91yee.com/columns/</span></a> \r\n	</li>\r\n</ul>\r\n<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">Roy Thomas Fielding博士论文英文版本</span>\r\n<ul>\r\n	<li>\r\n		<a href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</span></a> \r\n	</li>\r\n</ul>\r\n<hr />\r\n<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">作者简介：骆古道，网名Cnruby，八十年代初毕业于西北工业大学数理力学系，1988年公派留学德国，从事组合最优化理论研究，从九十年代初期起一直致力于计算机领域软件开发、设计和管理等方面工作，个人博客为“</span><a href=\"http://www.hhtong.com/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">道喜技术日记</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">”。</span>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>', null, null, '2014-03-31 17:24:43', '0', '理解REST软件架构', '0');
INSERT INTO `article` VALUES ('5', 'zhagnsan', '1', '<p>\r\n	<a href=\"http://inhu.net/tag/intellij-idea-13\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">IntelliJ IDEA 13</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">&nbsp;正式发布，内部版本 133.193，该版本大大改进对 Java 8 和 Java EE 7 的支持。</span>\r\n</p>\r\n<p>\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">下载地址：</span>\r\n</p>\r\n<p>\r\n	<a href=\"http://www.jetbrains.com/idea/download/index.html\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://www.jetbrains.com/idea/download/index.html</span></a> \r\n</p>\r\n<p>\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">改进记录请看：</span>\r\n</p>\r\n<p>\r\n	<a href=\"http://www.jetbrains.com/idea/whatsnew/\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">http://www.jetbrains.com/idea/whatsnew/</span></a> \r\n</p>\r\n<p>\r\n	<a href=\"http://pan.baidu.com/s/1GL1Rd\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">下载注册机</span></a> \r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<a href=\"http://inhu.qiniudn.com/wp-content/uploads/2013/12/QQ%E6%88%AA%E5%9B%BE20131209205023.png\"><img src=\"http://inhu.qiniudn.com/wp-content/uploads/2013/12/QQ%E6%88%AA%E5%9B%BE20131209205023.png\" alt=\"keygen IntelliJ IDEA 13 IntelliJ IDEA 13 注册机\" width=\"315\" height=\"148\" title=\"IntelliJ IDEA 13 注册机\" style=\"height:auto;\" /></a> \r\n</p>', null, null, '2014-03-31 17:28:14', '0', 'IntelliJ IDEA 13 注册机', '0');
INSERT INTO `article` VALUES ('6', 'zhagnsan', '9', '<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">梦想的追逐，是每个人都在向往的。每天阳光照射进窗户的那一刻，不是喧闹的车声、不是刺眼的阳光、更不是无情的闹钟把我唤醒。当梦想就在面前，发现越更需要努力。笔者接近一个月没写文章了，因为笔者现在终于踏出实现自己梦想的第一步 ——&nbsp;</span><a href=\"http://inhu.net/tag/%e5%88%9b%e4%b8%9a\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">创业</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">。虽然并非笔者主导</span><a href=\"http://inhu.net/tag/%e5%88%9b%e4%b8%9a\" target=\"_blank\"><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">创业</span></a><span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">，但这一次将会真切的体会到创业到底是何物。</span>\r\n</p>\r\n<h2 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">说说感悟</span>\r\n</h2>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">当我得到现在我这位CEO的offer的时候，我的职位是一个产品经理。那时候的技术团队还有两个人一个是JEE、一个Android，对于第一次成为产品经理笔者不免有点担心自己能力的不足和经验上的欠缺，对项目管理这一层笔者可以说是有一定的经验，但对于整个产品的一个需求、方向、推广方案也只是空有理论没有得到很好的数据支持。但毕竟笔者从2000开始混迹互联网，初中开始尝试做属于自己的产品 —— 电子杂志，后来也尝试了做社区论坛，虽然都是小打小闹但在运营推广方面积累了一定的经验。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">最初笔者被任命职位是产品经理，但由于团队的整体架构发生了一次颠覆性的改变后，重新被任命为“CTO”，但实际上是一个更偏向于技术的，但不需做需求分析的产品经理。那时候我一直担心自己做不来，也一度陷入迷惑阶段。但某一天偶然的看到了鬼脚七的一篇碎片回忆，他当时也是被刚任命作为技术总监也一度陷入和我一样的状态，但他对自己说了一句话：</span>\r\n</p>\r\n<blockquote style=\"text-indent:2em;\">\r\n	<p>\r\n		<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">“既然领导信任我，我就必须相信这个位置我可以适合。如果我做不好，换成了别人也不一定能比我做得更好。”</span>\r\n	</p>\r\n</blockquote>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">当笔者做好了这个任命的心理准备后，真正的领悟到责任是如此的严肃。</span>\r\n</p>\r\n<h2 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">说说开发</span>\r\n</h2>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">由于团队颠覆性的改变，所以不得不由笔者这个新任命的CTO去重新组建团队。但在重新组建团队之前有更为重要的任务去完成：推倒现有的开发架构重新采用一套更“高效率”的、更符合商业计划的架构，三个月内把一套基本功能的系统做出来。可能在这里会有读者产生疑惑为什么高效率这一个词会被双括号括起来，其实笔者把系统换成一套代码产出效率更高的架构而非系统的运行效率。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">其实出于商业计划和技术层面上的衡量，弃用传统SSH最终选用一套紧耦合、100% MVC架构的开发框架。笔者相信很多读者都会惊讶于紧耦合这种概念，但出于商业层面的考虑可能是一个更好的选择。为什么？</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<ul>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">资金链并不多，而且我们必须在明年3月份必须上线并且拿到试运行报告才能去寻找融资、投资合作。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">过多的配置文件、过多的分层对于小团队来说是个负担。虽然日后队伍会壮大，但这个日后也非两三年可为。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">网站前期不可能会有超过上万的并发，无需考虑过多的运行效率。当性能到达了瓶颈可以逐步优化，最后已经逐渐到了极限之时再考虑更换架构，但估计那也是5到7年之后的事。</span>\r\n		</li>\r\n		<li>\r\n			<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">先解决当前问题，尽量把日后问题产生的隐患控制好。而非解决当前问题并且解决日后会产生的问题。</span>\r\n		</li>\r\n	</ul>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">其实对于这方面，可以了解更多关于迭代开发的一些理论。笔者虽然没有深入了解过迭代的开发，但在混迹过的互联网公司也深切的理解到迭代的重要性和表面的一些知识。其实技术就是为了解决商业上的问题。</span>\r\n</p>\r\n<h2 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">说说组建团队</span>\r\n</h2>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">在框架搭建完之后，需要的就是补充人力把团队的开发产出提高上去。我开始考虑过招聘几年经验的开发人员，但是由于在年尾真正让笔者觉得有能力的寥寥无几。而且对于软件行业来说，95%的公司都是在做企业软件、行业软件，导致了一批又一批的开发人员成了没有激情、没有思想的机器人。而且对于互联网需求如龙卷风过境般的更换，传统软件行业的开发者来说可能很难适应。所以最后决定尝试校招。</span>\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">校招中，我比较看好的是自学能力和动手能力。从在校的获奖情况和实际的项目开发经验中首先判断出这个同学的动手能力，笔者更多的是喜欢一些经常自己做宿舍做些小玩意出来的同学，因为笔者当年大学期间也自己经常动手做一些各种各样的东西。然后通过谈话了解一下个人的学习能力和对互联网、开发、新事物的看法，对于有想法的同学尤为喜爱。因为有思想的开发人员才会给团队带了活力，带来动力，带来生机。如果找一堆机器人进来，最后团队还是死气沉沉的样子难以激发活力。</span>\r\n</p>\r\n<h2 style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">结语</span>\r\n</h2>\r\n<p style=\"text-indent:2em;\">\r\n	<br />\r\n</p>\r\n<p style=\"text-indent:2em;\">\r\n	<span style=\"font-size:14px;font-family:\'Microsoft YaHei\';\">当踏上创业的第一步的时候，就不能再犹豫、再迷失。而是真真切切的、力求最好的把事情做好。责任，没那么容易。</span>\r\n</p>', null, null, '2014-03-31 17:31:59', '0', '创业感悟', '0');
INSERT INTO `article` VALUES ('7', 'zhagnsan', '3', '<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<a href=\"http://martinfowler.com/bliki/CQRS.html\">命令和查询责任分离</a>（CQRS）是由Greg Young提出的一种将系统的读（查询）、写（命令）操作分离为两种独立子系统的架构模式。命令通常是异步执行的，并存储在一个事务型数据库中，而读操作则通常是最终一致的，并且数据来自于解正规化的视图。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	本文在此提出并为读者展示一种为CQRS系统创建一套RESTful API的方式。这种方式结合了HTTP的语义、REST API基于资源的风格，并能够处理分布式计算的某些问题，例如最终一致性和并发性。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	此外我们还提供了<a href=\"https://github.com/aliostad/m-r\">一套原型API</a>，它建立于Greg Young编写的<b>m-r</b> CQRS原型之上，后者也被称为<b>SimplestPossibleThing</b>。m-r可以认为是CQRS原型的事实标准，它鼓舞了许多团队采用并创建CQRS系统。虽然这个m-r原型很简单，但它已经能够展示在现实世界中使用RESTful CQRS系统的某些机遇和挑战了。\r\n</p>\r\n<div class=\"clear\" style=\"margin:0px;padding:0px;border:0px;font-size:0px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n</div>\r\n<div class=\"related_sponsors visible stacked\" style=\"margin:20px 0px 20px 20px;padding:0px;border:1px solid #DFDFDF;font-family:Arial, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n	<div class=\"gray_section_related only1 fullWidth\" style=\"margin:0px;padding:0px;background-color:#F7F7F7;\">\r\n		<div class=\"related_editorial sponsored only1\" style=\"margin:0px;padding:10px 0px 0px 10px;border:0px;\">\r\n			<p class=\"title\" style=\"font-weight:bold;\">\r\n				相关厂商内容\r\n			</p>\r\n			<div class=\"links\" style=\"margin:0px;padding:5px 0px 0px;border:0px;\">\r\n				<h3 class=\"entrypdf f_vcrbottom\" style=\"font-size:12px;font-weight:normal;color:#222222;font-family:Arial, Helvetica, sans-serif;\">\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2596&utm_source=infoq&utm_medium=VCR&utm_campaign=vcr_articles_click\" target=\"_blank\">《技术驱动 京东十年》——京东集团高级副总裁李大学畅谈技术团队10年演变</a> \r\n				</h3>\r\n				<h3 class=\"entrypdf f_vcrbottom\" style=\"font-size:12px;font-weight:normal;color:#222222;font-family:Arial, Helvetica, sans-serif;\">\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2597&utm_source=infoq&utm_medium=VCR&utm_campaign=vcr_articles_click\" target=\"_blank\">《面向网络游戏的大数据处理框架和挑战》 ——网易大数据高级研究员王健宗</a> \r\n				</h3>\r\n				<h3 class=\"entrypdf f_vcrbottom\" style=\"font-size:12px;font-weight:normal;color:#222222;font-family:Arial, Helvetica, sans-serif;\">\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2731&utm_source=infoq&utm_medium=VCR&utm_campaign=vcr_articles_click\" target=\"_blank\">ArchSummit全球架构师峰会（深圳站）2014重装上阵，购票入口开放，7折限时优惠</a> \r\n				</h3>\r\n				<h3 class=\"entrypdf f_vcrbottom\" style=\"font-size:12px;font-weight:normal;color:#222222;font-family:Arial, Helvetica, sans-serif;\">\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2707&utm_source=infoq&utm_medium=VCR&utm_campaign=vcr_articles_click\" target=\"_blank\">侧重业务，引领技术；开放竞合，不忘初心——ArchSummit2014深圳站启动</a> \r\n				</h3>\r\n				<h3 class=\"entrypdf f_vcrbottom\" style=\"font-size:12px;font-weight:normal;color:#222222;font-family:Arial, Helvetica, sans-serif;\">\r\n					<a href=\"http://www.infoq.com/cn/vendorcontent/show.action?vcr=2598&utm_source=infoq&utm_medium=VCR&utm_campaign=vcr_articles_click\" target=\"_blank\">《从0到1：“英语流利说”MVP开发理念实践》：QCon北京移动专题</a> \r\n				</h3>\r\n				<div class=\"clear\" style=\"margin:0px;padding:0px;border:0px;font-size:0px;\">\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class=\"clear\" style=\"margin:0px;padding:0px;border:0px;font-size:0px;\">\r\n	</div>\r\n</div>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	我们在将下一部分审阅m-r的领域模型，随后对相关特性的API设计进行一些探索。最后，我们将对一些所做的选择展开讨论，并且讨论一些RESTful m-r的概念和理论内容。\r\n</p>\r\n<h2 style=\"font-size:20px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	m-r领域\r\n</h2>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	m-r模型是一个经过简化的库存管理系统的领域模型，你可以创建新库存物品（假设它是某种类型的产品），重命名或取消激活（即<span>逻辑删除</span>）它们。被取消激活的物品将不再为用户所见，而所有活动的物品都可以被获取，并且能够看到每个物品的所有细节。你也能够增加或减少这些库存物品，指定所加入或减少的物品数据。换句话说，在建立库存量之后，就可以开始使用这个系统了。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	用户将通过同步的查询来查看物品列表或是物品细节，对于物品状态的修改将通过命令来实现。在现实世界中，命令应该是异步执行的，但由于代码中使用了内存中的事件总线（Event Bus）及事件处理函数，因此在最终实现中命令都是同步执行的。\r\n</p>\r\n<div id=\"lowerFullwidthVCR\" style=\"margin:0px;padding:0px;border:0px;font-family:Arial, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n</div>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<img src=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224030.png\" width=\"600\" alt=\"\" /> \r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	m-r模型实现了CQRS：命令和查询被分别存储在不同的地方，并且各自由系统中完全不同的部分进行处理。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	除了CQRS之外，m-r也使用了<a href=\"http://martinfowler.com/eaaDev/EventSourcing.html\">事件溯源</a>（Event Sourcing）作为它的持久化机制。在这种方式中，对于领域模型的修改会被捕获为一系列的事件，这些事件会按照它们被调用的顺序存储起来。为了获取某个模型的当前状态，需要将所有事件按照它们发生的顺序进行重播。换句话说，模型中实体的状态信息是不会被持久化的。举例来说，如果我们创建了一个库存物品，随后将它重命名两次，那么我们将会得到一个<b>InventoryItemCreated</b>事件和两个<b>InventoryItemRenamed</b>事件，这些事件都会被保存在事件存储（Event Store）中。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	事件是连续的，并且每个事件都带有一个版本号，用以在并发时进行检查。举例来说，如果某个库存物品在版本2的基础上进行重命名，但正好有另一个重命名发生在同一个物品上，并使它的当前版本变为3，那么这种情况就会导致并发异常。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	命令与领域事件通常是一对一的关系，当<span>调用</span>了某个命令之后，领域模型会发起并存储一个事件。领域事件是事件溯源的基石，它和跨多个边界上下文（bounded context）的事件不同，往往粒度更细，并且只包括所需的最小数量的信息。因此，它并不是一个适合于在不同的边界上下文之间进行集成的工具。除了使用一个进程内的事件总线之外，m-r还用到了一个内存中的事件存储。这个存储本质就是一个哈希表，它使用模型的id作为键，并且持续跟踪模型中发生的任何事件。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	如欲了解CQRS和事件溯源的更多信息，你可以阅读Greg Young的<a href=\"http://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf\">这本迷你书</a>。\r\n</p>\r\n<h2 style=\"font-size:20px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	创建一套上层的REST API\r\n</h2>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	如果你倾向于先去感受一下最终的实现，可以<a href=\"http://m-r.azurewebsites.net/index.html#/\">在这里看一下一个目前（暂时性）可运行</a>的原型。我们鼓励你使用fiddler或者浏览器自带的开发工具去检查一下这个简单的示例中的HTTP请求。在<a href=\"https://github.com/aliostad/m-r\">GitHub</a>上可以找到包括这套API和一个基本的Angular应用的源代码。不过我们还是要强调，它的实现方式和使用的技术并非关键所在，读者更应该关注于设计方式及HTTP的展现。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	公开领域的构造\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	对于这个API层来说，最重要的责任是将底层的领域建模为资源，并通过HTTP语义暴露出来。在这个过程中，API层将创建一个<b>公共领域</b>，它由资源（以及它们的唯一标识符-&gt;URL）以及输入和输出的消息所构成。底层的领域越简单，这个公开领域和底层领域的相似程度就越高。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	（单击图片以放大）\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<a href=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224031.jpg\"><img src=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224031.jpg\" width=\"600\" alt=\"\" /></a> \r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	在这个例子中，我们创建的公开领域与底层的领域还是比较相似的，但即使是这种简单的领域，我们也不能够直接将底层的领域暴露出去：这可能造成领域的内部实现被泄漏出去，而且领域内部也不一定包含API层所需的全部属性。比方说，所有的内部命令都会用一个<span>整数</span>来表示并发时所需的<b>版本号</b>，而在公开领域中则用<span>字符串</span>表示这个属性。我们稍后将会使用这个属性作为ETag，而根据HTTP规格要求，ETag必须是不透明的。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	简单来说，我们所创建的公开领域表现了内部的领域类，但又不完全相同。这种公开领域通常被称为一个视图模型（Vide Model）。这个术语并不太准确，因为这种表达方式感觉上对公开领域有些排斥，将它视为一种“哑”模型，因此我们倾向于使用一个新术语“输出模型”（output model）。它将被应用到输入和输出消息中（命令和输出模型）。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	资源\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	我们很自然地想到应该有一个<b>InventoryItem</b>资源，因此我们将领域中的这个单根实体暴露为一个单独的资源，可以用<b>/api/InventoryItem</b>方便地进行表示。每个库存物品将用<b>/api/InventoryItem/{id}</b>进行表示，m-r使用了全局唯一标识符（GUID）作为Id。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	使用这个单独的根对象就可以完整的表现我们的领域了。还有一种方式是使用<b>/api/InventoryItem/{id}/Stock</b>这个资源作为添加和删除库存量（即签入或移除物品）的方法。从本质上说它们没有什么高下之分，无非是哪种方式能够更好地表现资源而已。由于第一种方式更加简便，因此我们就使用这种方式。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	（单击图片以放大）\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<a href=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224032.jpg\"><img src=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224032.jpg\" width=\"600\" alt=\"\" /></a> \r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	查询\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	我们需要两个查询：<b>GetInventoryItems</b>和<b>GetInventoryItemDetails</b>。这里我们将通过两个GET方法<b>/api/InventoryItem</b>和<b>/api/InventoryItem/{id}</b>暴露出这两个查询功能。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<b>GetInventoryItems</b>方法能够获取仅包含了物品<b>名称</b>和<b>Id</b>的一个列表，它会根据<b>ACCEPT</b>头决定返回JSON或是XML（ASP.NET Web API能够支持这一功能）。如果某个资源适合于缓存，那么所有的GET请求都有可能返回缓存数据。<b>GetInventoryItems</b>返回<b>InventoryItemListDataCollection</b>作为输出消息。虽然可以通过数据内容的哈希生成ETag，不过这里我们选择将列表中每一项的<b>Id</b>和<b>名称</b>进行哈希后得到的结果作为ETag返回给客户端（例如浏览器）。客户端可以选择将资源缓存起来，并针对ETag使用<b>If-Non-Match</b>进行条件请求。我们选择将资源的<b>max-age</b>设为0，因此客户端的GET会始终使用条件请求，不过也可以选择设置一个人为的过期时间。\r\n</p>\r\n<pre>GET /api/InventoryItem HTTP/1.1 \r\nAccept:application/json, text/plain, */* \r\nAccept-Encoding:gzip,deflate,sdch \r\nIf-None-Match:\"LdHipfxR7BsfBI3hwqt2BLsno8ic98KmrIA1y67Nnw4=\"\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	返回结果\r\n</p>\r\n<pre>HTTP/1.1 304 Not Modified \r\nETag: \"LdHipfxR7BsfBI3hwqt2BLsno8ic98KmrIA1y67Nnw4=\"\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<b>GetInventoryItemDetails</b>方法会返回某个库存物品的细节，包括<b>Id</b>，<b>Name</b>和<b>CurrentCount</b>属性，最后一项属性记录了当前的库存数量。虽然内部领域的读取模型（read model）包含了版本号，但如果将某个数值类型的版本号直接作为ETag会产生安全性问题，因为客户端可以轻易地猜出下一个数值。因此，我们选择了使用高级加密标准（AES）对版本号进行加密后，作为<b>InventoryItemDetails</b>方法的ETag输出。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	为每个操作都重新实现ETag对于API层来说有些负担过重，因此我们定义了一个<b>IConcurrencyAware</b>接口：\r\n</p>\r\n<pre>public interface IConcurrencyAware \r\n{ \r\n    string ConcurrencyVersion { get; set; } \r\n}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	每个支持ETag的输出模型都要实现这个接口，当API层看到某个输出模型支持这个接口时，就会读取版本号并设置ETag值。另一方面，当API层对条件式GET请求进行响应时，会将生成的ETag与客户端在<b>If-None-Match</b>头中传入的值进行比较。所有这些操作都可以通过一个单独的全局filter实现：<b>ConcurrencyAwareFilter</b>。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	需要注意的是，添加、删除或者重命名某个库存物品时应该使物品列表的缓存失效。请看下面的例子（条件式GET请求的逻辑是在浏览器端完成的，不需要特别编写代码实现）：\r\n</p>\r\n<pre>GET /api/InventoryItem HTTP/1.1 \r\nIf-None-Match:\"CWtdfNImBWZDyaPj4UjiQr/OrCDIpmjVhwp8Zjy+Ok0=\"\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	返回结果是一个状态码为200的完整响应，并且包含了一个新的ETag值：\r\n</p>\r\n<pre>HTTP/1.1 200 OK \r\nCache-Control:max-age=0, private \r\nContent-Length:68 \r\nETag:\"0O/961NRFDiIwvl66T1057MG4jjLaxDBZaZHD9EGeks=\" \r\nContent-Type:application/json; charset=utf-8; domain-\r\nmodel=InventoryItemListDataCollection; version=1.0.0.0; \r\nformat=application%2fjson; schema=application%2fjson; is-text=true \r\n...\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	请注意Content-Type头包含了额外的参数，这是对于“<a href=\"http://byterot.blogspot.co.uk/2012/12/5-levels-of-media-type-rest-csds.html\">媒体类型的五种级别</a>”（或者简称<b>5LMT</b>）概念的一种实现，这种方式不是将所有信息都塞到一个单独的令牌（token）中，而是使用不同的参数来表达对用户有用的不同级别的数据，能够表达不同级别的有用信息。下文会对这个主题做进一步的讨论。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	命令\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	查询通常会映射到GET方法，而命令则需要映射到POST、PUT、DELETE和PATCH方法。将HTTP谓词映射到CRUD操作是一种流行的观念，但在真实世界中很少能够将谓词和数据库操作一一对应。实际上，REST API并不在对持久化存储之上的一个简单封装，相反，它是指引用户去了解业务领域、操作与工作流的一扇门。因此它必须能够不依赖于特定的谓词去表达某个维度的意图。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	一种常见的方式是使用远程过程调用（RPC）风格的资源，例如<b>/api/InventoryItem/{id}/rename</b>。虽然它看上去确实去除了对某种谓词的依赖，但它违反了REST面向资源的表现能力。我们需要记住，资源是一个名词，HTTP谓词则表示动词和动作，而自描述的消息（REST的宗旨之一）则是表达其它维度信息和意图的手段。实际上，在HTTP消息中所包含的命令就应该足以描述任何人为的操作了。但是，完全依赖于请求体中的消息也有它自己的问题，因为请求体通常是作为流传递的，要在辩认出它的具体操作之前获取整个请求体有时是不可能做到的，而且这也不是一种明智的做法。这里，我们将展示一种基于5LMT中的第4级别（即领域模型）处理请求的方式，命令的类型将包含在<b>Content-Type</b>头中的某个参数内。\r\n</p>\r\n<pre>PUT /api/InventoryItem/4454c398-2fbb-4215-b986-fb7b54b62ac5 HTTP/1.1  \r\nAccept:application/json, text/plain, */* \r\nAccept-Encoding:gzip,deflate,sdch \r\nContent-Type:application/json;domain-model=RenameInventoryItemCommand\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	这样就能够将请求正确地输送给服务端相应的处理方法了。那这种方式是否将过多的信息泄露给客户端了呢？并非如此。输入输出消息的schema（以及名称）是<b>公开领域</b>的一部分，客户端必须能够完整地访问到它，因此它们依赖于schema也是在我们所预期的。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	至于客户端的实现只用了最少量的代码，这里使用了一个<b>AngularJS</b><span>的装饰（decorator</span><span>）</span>封装了<b>$http</b>服务，它能够读取这个原型的返回内容，并且能够在<b>Content-Type</b>头中加入额外的参数信息。只要保持JavaScript<span>构造函数</span>的名称不变就没有问题。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	我们已经解决了辨认当前正被调用的方法的问题，接下来需要将命令按照语义映射到相应的HTTP谓词。在将命令映射到谓词时，选择正确谓词的关键不仅仅在于语义，同样要考虑<b>幂等性</b>（至于谓词的安全性则无需顾忌，因为任何一个命令谓词都是不安全的）。PUT、PATCH和DELETE是幂等的，而POST则不是幂等的（多次调用一个幂等的谓词的结果与仅调用一次是相同的）。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	CreateInventoryItemCommand\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	从CRUD范式的角度来说，<b>CreateInventoryItemCommand</b>很自然地适用于POST方法。（这里只显示重要的头信息）\r\n</p>\r\n<pre>POST /api/InventoryItem HTTP/1.1 \r\nContent-Type:application/json;domain-model=CreateInventoryItemCommand  \r\n\r\n{\"name\": \"CQRS Book\"}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	返回的响应如下:\r\n</p>\r\n<pre>HTTP/1.1 202 Accepted \r\nLocation: http://localhost/SimpleCQRS.Api/api/InventoryItem/\r\n109712b9-c3d5-4948-9947-b07382f9c8d9\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	该操作将在location头信息中返回这个将被创建的库存物品（因为所有操作都是异步执行的）的URL地址。\r\n</p>\r\n<h5 style=\"font-size:17px;font-weight:normal;color:#222222;font-family:Georgia, \'Times New Roman\', Times, serif;background-color:#FFFFFF;\">\r\n	DeactivateInventoryItemCommand\r\n</h5>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	如同前文所述，取消激活库存物品就代表一次逻辑删除。此外，删除操作是幂等的，因为多次删除一个库存物品的效果和一次删除是一样的。因此我们将使用DELETE选项作为取消激活某个物品的方式（该方法带有一个空的方法体）。\r\n</p>\r\n<pre>DELETE /api/InventoryItem/f2b75f21-001a-4eed-b8f3-35bf5e4e9b0d HTTP/1.1 \r\nContent-Type:application/json;domain-model=DeactivateInventoryItemCommand  \r\n\r\n{}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	返回的响应如下:\r\n</p>\r\n<pre>HTTP/1.1 202 Accepted</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	虽然也可以在方法体中传递id，但在URL中已经提供了id信息。<b>DeactivateInventoryItemCommand</b>构造函数的唯一职责是正确地设置<b>domain-model</b>这个参数。\r\n</p>\r\n<h5 style=\"font-size:17px;font-weight:normal;color:#222222;font-family:Georgia, \'Times New Roman\', Times, serif;background-color:#FFFFFF;\">\r\n	RenameInventoryItemCommand\r\n</h5>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<b>RenameInventoryItemCommand</b>比起其它命令来说更有趣一点。首先，重命名一个库存物品也就是进行修改，因此使用PUT谓词是最合适的。另一方面，如果你正在重命名某个物品时，你的同事也在尝试将其重命名为另一个名字的话会怎样呢？这就是一个并发问题。HTTP通过<b>If-Unmodified-Since</b>和<b>If-Match</b>提供了对资源进行并发修改时的保护机制。因为我们使用了ETag，因此就相应地设置<b>If-Match</b>：\r\n</p>\r\n<pre>PUT /api/InventoryItem/f2b75f21-001a-4eed-b8f3-35bf5e4e9b0d HTTP/1.1 \r\nContent-Type:application/json;domain-model=RenameInventoryItemCommand \r\nIf-Match:\"DL1IsUoH709K+N5TXFzlQeQI5arO8r/U0SzXcRhuXLc=\"  \r\n\r\n{\"newName\": \"CQRS Book 1\"}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<b>AngularJs</b>的controller会传递ETag值，并传入模型中，之后在条件式PUT请求时进行使用。如你所见，<b>ETag</b><b>的值仅仅是对领域模型中版本号的一种表现</b>，但我们对其进行加密以满足<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.11\">HTTP规格</a>的需要。服务端获取到这个值之后进行解密并还原成版本号的数值。如果版本号不匹配，领域模型就会抛出一个<b>ConcurrencyException</b>异常，在API层的<b>ConcurrencyExceptionFilterAttribute</b>类捕获到这个异常之后，会以HTTP语义的方式表现该异常。\r\n</p>\r\n<pre>HTTP/1.1 412 Precondition Failed</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	这个例子很好地说明了HTTP的并发如何与CQRS的并发检查机制相结合。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	CheckInItemsToInventoryCommand和RemoveItemsFromInventoryCommand\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	这两个命令就更加有趣了。我们将往库存中加入或删除一些物品。从某方面来说，这种操作是对库存物品的数量进行更新，因此可以将其实现为一个PUT（也许PATCH更合适）方法。但因为这两个命令并非幂等（比如说，调用CheckInItemsToInventoryCommand两次应该添加两次库存），因此最适合的谓词实际上是POST。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	客户端将在<b>Content-Type</b>头信息中的参数中设置领域模型的名称，如同我们之前所见的一样。\r\n</p>\r\n<pre>POST /api/InventoryItem/f2b75f21-001a-4eed-b8f3-35bf5e4e9b0d HTTP/1.1 \r\nContent-Type:application/json;domain-model=CheckInItemsToInventoryCommand  \r\n\r\n{\"count\": \"230\"}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	返回的响应是一样的：\r\n</p>\r\n<pre>HTTP/1.1 202 Accepted</pre>\r\n<h5 style=\"font-size:17px;font-weight:normal;color:#222222;font-family:Georgia, \'Times New Roman\', Times, serif;background-color:#FFFFFF;\">\r\n	HTTP的其它方面\r\n</h5>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	实现HTTP的一些其它方面也会带来一些好处，HEAD也是一个重要的谓词，它的响应结果和GET方法一样，但返回的响应体中不包括任何内容。我们为所有GET资源都实现了HEAD谓词，例如：\r\n</p>\r\n<pre>HEAD /api/InventoryItem HTTP/1.1 \r\nAccept:application/json, text/plain, */* \r\nAccept-Encoding:gzip,deflate,sdch\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	将返回\r\n</p>\r\n<pre>HTTP/1.1 200 OK </pre>\r\n<pre>ETag: \"LdHipfxR7BsfBI3hwqt2BLsno8ic98KmrIA1y67Nnw4=\"</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	具体在实现中会将HEAD请求转向给GET方法的处理函数，而框架本身会在最后负责移除返回的内容。这一系列实现都是自动触发的，因此在响应中可以正确地获得ETag。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	另一个需要实现的重要谓词是OPTIONS，这个谓词可以用以生成API文档，不过我们这里只是简单的返回该资源支持的所有谓词：\r\n</p>\r\n<pre>OPTIONS /api/InventoryItem/f2b75f21-001a-4eed-b8f3-35bf5e4e9b0d HTTP/1.1</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	它将返回如下内容：\r\n</p>\r\n<pre>HTTP/1.1 200 OK \r\nAllow: GET,POST,OPTIONS,HEAD,DELETE,PUT \r\nContent-Length: 46 \r\nContent-Type: application/json; charset=utf-8; domain-model=String%5b%5d; version=4.0.0.0; \r\nformat=application%2fjson; schema=application%2fjson; is-text=true  \r\n\r\n[\"GET\",\"POST\",\"OPTIONS\",\"HEAD\",\"DELETE\",\"PUT\"]\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	请注意，响应中的<b>Allow</b>头对于OPTIONS请求来说是必须的。不过HTTP规格本身并没有指定OPTIONS响应体中具体写法，因此我们就将允许的谓词作为一个字符串数组返回（注意，在domain-model参数中的<b>String[]</b>是经过<b>UrlEncoded</b>方法编码的结果）。可以利用这个谓词生成符合各种schema和语言需求的API文档。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	除了这些方法之外的任何调用都会返回一个<span>方法未找到（</span><span>method not found</span><span>）</span>或者405状态码，ASP.NET Web API自身已经实现了这一功能：\r\n</p>\r\n<pre>PUT /api/InventoryItem HTTP/1.1  \r\n\r\n{}\r\n</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	它将返回：\r\n</p>\r\n<pre>HTTP/1.1 405 Method Not Allowed \r\nAllow: POST,GET,HEAD,OPTIONS  \r\n\r\n{\"message\":\"Http Method not supported\"}\r\n</pre>\r\n<h2 style=\"font-size:20px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	讨论\r\n</h2>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	这一部分将详细叙述某些理论概念，以及我们的决定中一些比较困难，或者可能引起争议的部分。\r\n</p>\r\n<h3 style=\"font-size:18px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	可选的并发检查\r\n</h3>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	在m-r最初的实现中，所有命令（除了<b>CreateInventoryItemCommand</b>，它已经隐式地包含了值为0的版本号）都包含一个整数型的<b>CurrentVersion</b>字段。而这个版本中将它们修改为可选的（即C#中的可空类型）。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	在一方面，服务端应该负责保证自身状态的完整性。因此它不能、也不应该依赖于客户端所提供的版本号。并发检查是作为一个特性提供给客户端的，而不是服务端用以保证模型完整性的机制。如果客户端关心并发行为，那它就可以选择性地发送版本号，这已经通过在ETag中的加密信息提供给它们了。要记住的是，并发检查与服务端的事件版本号是不同的概念，后者是服务端的内部实现机制。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	另一方面，对于某些操作来说，并发检查是没有意义的。举例来说，如果两个客户端在同一时间（调用<b>CheckInItemsToInventoryCommand</b>方法）添加了20个库存物品，并且它们都具有版本号n，那么其中有一个命令就会失败，但这种失败是不必要的，因为我们确实需要添加40个物品。这种问题在高访问量的情况下会被放大。想象一下，如果大量的用户涌入亚马逊网站去购买哈利波特的最新一期，在多数情况下他们都会遇到并发问题。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	在HTTP中执行PUT（和PATCH）操作时会认为并发是一个可选的检查，这一点并非偶然。虽然并发检查可以异步执行，但我们需要尽力保证它必须同步执行，因此当我们返回状态码202（已接受）时，就代表服务端已经确认了没有并发冲突情况的产生。\r\n</p>\r\n<h5 style=\"font-size:17px;font-weight:normal;color:#222222;font-family:Georgia, \'Times New Roman\', Times, serif;background-color:#FFFFFF;\">\r\n	媒体类型的五种级别（5LMT）和创建新的媒体类型\r\n</h5>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	在社区里常见的一种做法是创建新的媒体类型，通常称为打造新的媒体类型。举例来说：\r\n</p>\r\n<pre>Content-Type:application/vnd.InventoryItemListDataCollection.1.0.0.0+json;</pre>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	这种使用非正规的方式表示某个媒体类型的子类型已经成为了一种通用的实践（已经实际上成为一种约定了），它将子系统分解为一些特定的、或者是正式的元素，并通过+号连接在一起。已经有些经过注册的媒体类型使用了这种约定，例如<b>application/rss+xml</b>和<b>application/atom+xml</b>。这两个示例处于媒体类型级别中的第3级别（或者叫做schema级别），而application/xml则处于第2级别（format级别）。某种意义上说，<b>application/atom+xml</b>就是一种<b>application/xml</b>类型，它们使用相同的format，而前者还指明了会使用ATOM schema。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	虽然这一约定会在未来版本的HTTP规格中得到认可，但它并未解决媒体类型不断增长的问题。首先，使用任何未注册的媒体类型都是<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7\">HTTP规格</a>所不提倡的，使用以上类型的<b>Content-Type</b>值也是一样。实际上，如果我们需要在所有API中为五个不同媒体级别的任意组合都注册一种媒体类型，那互联网号码分配局（IANA）恐怕需要发动一大批人去专门从事这个规模巨大的任务了。另一方面，许多客户端系统使用基于dictionary的媒体类型去处理这种请求，它们将不能够应付新创建的媒体类型。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	因此使用5LMT能够允许现有的客户端继续按照之前的方式正常工作，而更先进的客户端则可以利用更高级别的信息，它们都是作为独立的实体提供的。\r\n</p>\r\n<h5 style=\"font-size:17px;font-weight:normal;color:#222222;font-family:Georgia, \'Times New Roman\', Times, serif;background-color:#FFFFFF;\">\r\n	通过一个公开的领域保护内部领域是关键所在\r\n</h5>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	将服务端的内部实现进行抽象对客户端来说是非常重要的。如同之前所述，为较小的领域所创建的公开领域和内部领域会比较相似，但即使是在m-r这个示例中，我们也不能够将内部领域直接暴露出来，而必须创建一个独立的模型，<b>它表现了客户端能够接收和交互的信息</b>。\r\n</p>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	我们还应该将公开领域文档化，并展现给客户端。这一方面的进展值得关注，因为已经有各种不同的方法和实践开始露出水面了（从WADL到Swagger、RAML和RestDown等等）。\r\n</p>\r\n<h2 style=\"font-size:20px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	结论\r\n</h2>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	不仅通过一套REST API暴露CQRS是可能的，而且HTTP语义的丰富性也使得我们能够在它的基础上编写一套流畅而有效的API。整个流程包括创建一个由命令和查询（输入输出消息）组成的公开领域，以及能够处理并发和缓存的各种资源。此外，我们还需要将内部领域的查询和命令映射为HTTP谓词，并且使用状态码以表现状态转换和异常。使用5LMT将有助于创建完全RESTful，而不是远程过程调用风格的资源。所有这些都可以通过一个很小但可以运行的原型应用进行展现，该原型是通过ASP.NET Web API和AngularJS实现的。\r\n</p>\r\n<h2 style=\"font-size:20px;font-weight:normal;color:#222222;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	关于作者\r\n</h2>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<img src=\"http://infoqstatic.com/resource/articles/rest-api-on-cqrs/zh/resources/0224033.jpg\" alt=\"\" /><b>Ali Kheyrollahi</b> 是一位解决方案架构师、作者、博主、开源软件的作者和贡献者，目前任职于伦敦的一家大型电子商务企业。他对HTTP、Web API、REST、DDD和概念模型抱有极大的热情。而在处理实际的业务问题上又坚持实用性。他在这一行已有12年以上的经验，并在多个优秀企业工作过。他对于计算机视觉和机器学习领域有着深厚的兴趣，并且已经发布了多篇论文。在之前，他曾是一名医师，并作为一名非专科医生工作了5年。可以在这里找到他的博客，此外他在twitter上也非常活跃，可以通过@aliostad关注他。\r\n</p>\r\n<div style=\"margin:0px;padding:0px;border:0px;font-family:Arial, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n</div>\r\n<p style=\"font-size:14px;font-family:Arial, sans-serif;background-color:#FFFFFF;\">\r\n	<strong>查看原文地址：</strong><a href=\"http://www.infoq.com/articles/rest-api-on-cqrs\">Exposing CQRS Through a RESTful API</a> \r\n</p>', null, '2014-03-31 22:19:17', '2014-03-31 17:41:06', '0', '通过一组RESTful API暴露CQRS系统功能', '0');

-- ----------------------------
-- Table structure for `blog`
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `id` bigint(20) NOT NULL auto_increment,
  `article_num` int(11) default NULL,
  `background` varchar(255) default NULL,
  `description` varchar(255) default NULL,
  `mail_notice` bit(1) default NULL,
  `phone_notice` bit(1) default NULL,
  `title` varchar(255) default NULL,
  `banner_color` varchar(100) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('1', '0', '255,251,240', '跟着自己的脚步，踏踏实实的往前走', '', '', 'KrisJin点滴技术路程', '240,252,255');

-- ----------------------------
-- Table structure for `category`
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `id` bigint(20) NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  `priority` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES ('1', '开源技术', '5');
INSERT INTO `category` VALUES ('3', '云计算研究', '1');
INSERT INTO `category` VALUES ('4', '大数据', '1');
INSERT INTO `category` VALUES ('8', '搜索引擎', '2');
INSERT INTO `category` VALUES ('9', '一叶思语', '1');

-- ----------------------------
-- Table structure for `color`
-- ----------------------------
DROP TABLE IF EXISTS `color`;
CREATE TABLE `color` (
  `id` bigint(20) NOT NULL auto_increment,
  `code` varchar(255) NOT NULL,
  `description` varchar(255) default NULL,
  `name` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of color
-- ----------------------------
INSERT INTO `color` VALUES ('1', '255,179,167', '粉红，即浅红色。别称：妃色杨妃色湘妃色妃红色。', '粉红');
INSERT INTO `color` VALUES ('2', '237,87,54', '妃红色：古同“绯”，粉红色。杨妃色 湘妃色 粉红皆同义。', '妃色');
INSERT INTO `color` VALUES ('3', '240,0,86', '比大红浅的红色', '品红');
INSERT INTO `color` VALUES ('4', '244,121,131', '桃花的颜色，比粉红略鲜润的颜色', '桃红');
INSERT INTO `color` VALUES ('5', '219,90,107', '淡紫红色、较桃红色深一些，是非常妩媚娇艳的颜色', '海棠红');
INSERT INTO `color` VALUES ('6', '242,12,0', '石榴花的颜色，高色度和纯度的红色', '石榴红');
INSERT INTO `color` VALUES ('7', '201,55,86', '鲜红色', '樱桃色');
INSERT INTO `color` VALUES ('8', '240,86,84', '银朱和粉红色颜料配成的颜色。多用来形容有光泽的各种红色，尤指有光泽浅红', '银红');
INSERT INTO `color` VALUES ('9', '255,33,33', '正红色，三原色中的红，传统的中国红，又称绛色', '大红');
INSERT INTO `color` VALUES ('10', '140,67,86', '紫中略带红的颜色', '绛紫');
INSERT INTO `color` VALUES ('11', '200,60,35', '艳丽的深红', '绯红');
INSERT INTO `color` VALUES ('12', '157,41,51', '1，女子装扮时用的胭脂的颜色。 2，国画暗红色颜料', '胭脂');
INSERT INTO `color` VALUES ('13', '255,76,0', '朱砂的颜色，比大红活泼，也称铅朱朱色丹色', '朱红');
INSERT INTO `color` VALUES ('14', '255,78,32', '丹砂的鲜艳红色', '丹');
INSERT INTO `color` VALUES ('15', '243,83,54', '赤色', '彤');
INSERT INTO `color` VALUES ('16', '203,58,86', '茜草染的色彩，呈深红色', '茜色');
INSERT INTO `color` VALUES ('17', '255,45,81', '火焰的红色，赤色', '火红');
INSERT INTO `color` VALUES ('18', '201,31,55', '深红，火红。泛指赤色、火红色', '赫赤');
INSERT INTO `color` VALUES ('19', '239,122,130', '鲜艳的红色', '嫣红');
INSERT INTO `color` VALUES ('20', '255,0,151', '色橘红', '洋红');
INSERT INTO `color` VALUES ('21', '255,51,0', '引申为红色', '炎');
INSERT INTO `color` VALUES ('22', '195,39,43', '本义火的颜色，即红色', '赤');
INSERT INTO `color` VALUES ('23', '169,129,117', '绛色；浅绛色', '绾');
INSERT INTO `color` VALUES ('24', '195,33,54', '即深红', '枣红');
INSERT INTO `color` VALUES ('25', '179,109,97', '浅红色，浅绛色', '檀');
INSERT INTO `color` VALUES ('26', '190,0,47', '发黑的红色', '殷红');
INSERT INTO `color` VALUES ('27', '220,48,35', '像饮酒后脸上泛现的红色，泛指脸红', '酡红');
INSERT INTO `color` VALUES ('28', '249,144,111', '饮酒脸红的样子。亦泛指脸红色', '酡颜');
INSERT INTO `color` VALUES ('29', '255,241,67', '淡黄色', '鹅黄');
INSERT INTO `color` VALUES ('30', '250,255,114', '小鸭毛的黄色', '鸭黄');
INSERT INTO `color` VALUES ('31', '234,255,86', '淡黄色', '樱草色');
INSERT INTO `color` VALUES ('32', '255,166,49', '成熟杏子的黄色', '杏黄');
INSERT INTO `color` VALUES ('33', '255,140,​​49', '成熟杏子偏红色的一种颜色', '杏红');
INSERT INTO `color` VALUES ('34', '255,137,54', '柑橘的黄色', '橘黄');
INSERT INTO `color` VALUES ('35', '255,164,0', '橙的黄色。 （现代感比较强。广告上用得较多）', '橙黄');
INSERT INTO `color` VALUES ('36', '255,117,0', '柑橘皮所呈现的红色', '橘红');
INSERT INTO `color` VALUES ('37', '255,199,115', '橙的黄色。 （现代感比较强。广告上用得较多）', '姜黄');
INSERT INTO `color` VALUES ('38', '240,194,57', '浅黄色', '缃色');
INSERT INTO `color` VALUES ('39', '250,140,​​53', '界于红色和黄色之间的混合色', '橙色');
INSERT INTO `color` VALUES ('40', '179,92,68', '一种比栗色稍红的棕橙色至浅棕色', '茶色');
INSERT INTO `color` VALUES ('41', '168,132,98', '一种比哢叽色稍红而微淡、比肉桂色黄而稍淡和比核桃棕色黄而暗的浅黄棕色', '驼色');
INSERT INTO `color` VALUES ('42', '178,93,37', '棕毛的颜色,即褐色。 1，在红色和黄色之间的任何一种颜色2，适中的暗淡和适度的浅黑', '棕色');
INSERT INTO `color` VALUES ('43', '124,75,0', '深​​棕色', '棕黑');
INSERT INTO `color` VALUES ('44', '202,105,36', '无', '琥珀');
INSERT INTO `color` VALUES ('45', '149,85,57', '红色、赤红色。古人用以饰面', '赭色');
INSERT INTO `color` VALUES ('46', '211,177,125', '干枯焦黄', '枯黄');
INSERT INTO `color` VALUES ('47', '226,156,69', '一种落叶灌木，花黄绿色,叶子秋天变成红色。木材黄色可做染料', '黄栌');
INSERT INTO `color` VALUES ('48', '137,108,57', '1，中常橄榄棕色,它比一般橄榄棕色稍暗,且稍稍绿些。 2，古以秋为金,其色白,故代指白色', '秋色');
INSERT INTO `color` VALUES ('49', '189,221,3', '像刚长出的嫩叶的浅绿色', '嫩绿');
INSERT INTO `color` VALUES ('50', '120,146,98', '竹子的绿色', '竹青');
INSERT INTO `color` VALUES ('51', '163,217,0', '黄绿色，嫩黄色', '葱青');
INSERT INTO `color` VALUES ('52', '10,163,68', '翠绿色,形容植物浓绿', '青葱');
INSERT INTO `color` VALUES ('53', '0,188,18', '光润而浓绿的颜色。以上几种绿色都是明亮可爱的色彩', '油绿');
INSERT INTO `color` VALUES ('54', '12,137,24', '深绿', '绿沉');
INSERT INTO `color` VALUES ('55', '27,209,165', '1，青绿色。 2，青白色,浅蓝色', '碧色');
INSERT INTO `color` VALUES ('56', '42,221,156', '鲜艳的青绿色', '碧绿');
INSERT INTO `color` VALUES ('57', '72,192,163', '鲜艳的青蓝色', '青碧');
INSERT INTO `color` VALUES ('58', '61,225,173', '1，翡翠鸟羽毛的青绿色。 2，翡翠宝石的颜色。 (注：C-Y≧30 的系列色彩，多与白色配合以体现清新明丽感觉，与黑色配合效果不好：该色个性柔弱，会被黑色牵制)', '翡翠色');
INSERT INTO `color` VALUES ('59', '64,222,90', '绿而略黄的颜色', '草绿');
INSERT INTO `color` VALUES ('60', '0,224,158', '1，一类带绿的蓝色,中等深浅,高度饱和。 3，本义是蓝色。 4，一般指深绿色。 5，也指黑色。 6，四色印刷中的一色。 2，特指三补色中的一色。', '青色');
INSERT INTO `color` VALUES ('61', '0,224,121', '鲜绿', '青翠');
INSERT INTO `color` VALUES ('62', '192,235,215', '白而发青,尤指脸没有血色', '青白');
INSERT INTO `color` VALUES ('63', '224,238,232', '淡青灰色，极淡的青绿色', '鸭卵青');
INSERT INTO `color` VALUES ('64', '187,205,197', '深灰绿色', '蟹壳青');
INSERT INTO `color` VALUES ('65', '66,76,80', '鸦羽的颜色。即黑而带有紫绿光的颜色', '鸦青');
INSERT INTO `color` VALUES ('66', '158,208,72', '浅黄绿色', '豆绿');
INSERT INTO `color` VALUES ('67', '150,206,84', '浅青绿色', '豆青');
INSERT INTO `color` VALUES ('68', '123,207,166', '淡灰绿色', '石青');
INSERT INTO `color` VALUES ('69', '46,223,163', '玉的颜色，高雅的淡绿、淡青色', '玉色');
INSERT INTO `color` VALUES ('70', '127,236,173', '绿色而微白', '缥');
INSERT INTO `color` VALUES ('71', '164,226,198', '艾草的颜色。偏苍白的绿色', '艾绿');
INSERT INTO `color` VALUES ('72', '33,166,117', '经冬松柏叶的深绿', '松柏绿');
INSERT INTO `color` VALUES ('73', '5,119,72', '亦作“松花”、“松绿”。偏黑的深绿色,墨绿', '松花绿');
INSERT INTO `color` VALUES ('74', '68,206,246', '三原色的一种。像晴天天空的颜色（注：这里的蓝色指的不是RGB色彩中的B，而是CMY色彩中的C）', '蓝');
INSERT INTO `color` VALUES ('75', '23,124,176', '也叫“蓝靛”。用蓼蓝叶泡水调和与石灰沉淀所得的蓝色染料。呈深蓝绿色 （注：有些地方将蓝墨水称为“靛水”或者“兰靛水”）', '靛青');
INSERT INTO `color` VALUES ('76', '6,82,121', '由植物(例如靛蓝或菘蓝属植物)得到的蓝色染料', '靛蓝');
INSERT INTO `color` VALUES ('77', '62,237,231', '青蓝色', '碧蓝');
INSERT INTO `color` VALUES ('78', '112,243,255', '类似晴朗天空的颜色的一种蓝色', '蔚蓝');
INSERT INTO `color` VALUES ('79', '75,92,196', '鲜艳明亮的蓝色（注：英文中为RoyalBlue 即皇家蓝色，是皇室选用的色彩，多和小面积纯黄色（金色）配合使用。 ）', '宝蓝');
INSERT INTO `color` VALUES ('80', '161,175,201', '一种近于灰略带蓝的深灰色', '蓝灰色');
INSERT INTO `color` VALUES ('81', '46,78,126', '蓝而近黑', '藏青');
INSERT INTO `color` VALUES ('82', '59,46,126', '蓝里略透红色', '藏蓝');
INSERT INTO `color` VALUES ('83', '74,66,102', '青黑色的颜料。古代女子用以画眉', '黛');
INSERT INTO `color` VALUES ('84', '66,102,102', '墨绿', '黛绿');
INSERT INTO `color` VALUES ('85', '66,80,102', '深蓝色', '黛蓝');
INSERT INTO `color` VALUES ('86', '87,66,102', '深紫色', '黛紫');
INSERT INTO `color` VALUES ('87', '129,84,99', '浑浊的紫色', '紫酱');
INSERT INTO `color` VALUES ('88', '129,84,118', '紫中略带红的颜色', '酱紫');
INSERT INTO `color` VALUES ('89', '76,34,27', '檀木的颜色，也称乌檀色乌木色', '紫檀');
INSERT INTO `color` VALUES ('90', '0,51,113', '纯度较低的深紫色', '绀青');
INSERT INTO `color` VALUES ('91', '86,0,79', '黑红色', '紫棠');
INSERT INTO `color` VALUES ('92', '76,141,174', '深蓝色', '群青');
INSERT INTO `color` VALUES ('93', '176,164,227', '浅蓝紫色', '雪青');
INSERT INTO `color` VALUES ('94', '204,164,227', '紫丁香的颜色，浅浅的紫色，很娇柔淡雅的色彩', '丁香色');
INSERT INTO `color` VALUES ('95', '237,209,216', '浅灰而略带红的颜色', '藕色');
INSERT INTO `color` VALUES ('96', '228,198,208', '浅紫而略带红的颜色', '藕荷色');
INSERT INTO `color` VALUES ('97', '117,135,138', '即各种颜色掺入黑色后的颜色，如苍翠', '苍色');
INSERT INTO `color` VALUES ('98', '81,154,115', '无', '苍黄');
INSERT INTO `color` VALUES ('99', '162,155,124', '无', '苍青');
INSERT INTO `color` VALUES ('100', '115,151,171', '无', '苍黑');
INSERT INTO `color` VALUES ('101', '209,217,224', '无', '苍白');
INSERT INTO `color` VALUES ('102', '136,173,166', '无', '水色');
INSERT INTO `color` VALUES ('103', '243,211,231', '无', '水红');
INSERT INTO `color` VALUES ('104', '212,242,231', '无', '水绿');
INSERT INTO `color` VALUES ('105', '210,240,244', '无', '水蓝');
INSERT INTO `color` VALUES ('106', '211,224,243', '无', '淡青');
INSERT INTO `color` VALUES ('107', '255,255,255', '纯白，洁白，净白，粉白', '精白');
INSERT INTO `color` VALUES ('108', '255,251,240', '乳白色', '像牙白');
INSERT INTO `color` VALUES ('109', '240,252,255', '如雪般洁白', '雪白');
INSERT INTO `color` VALUES ('110', '214,236,240', '淡蓝色', '月白');
INSERT INTO `color` VALUES ('111', '186,202,198', '金属氧化后的色彩', '老银');
INSERT INTO `color` VALUES ('112', '167,142,68', '无', '乌金');
INSERT INTO `color` VALUES ('113', '84,150,136', '无', '铜绿');
INSERT INTO `color` VALUES ('114', '233,231,239', '带银光的白色', '银白');
INSERT INTO `color` VALUES ('115', '234,205,118', '平均为深黄色带光泽的颜色', '金色');
INSERT INTO `color` VALUES ('116', '深黑色、泛指黑色', '无', '65,85,93');
INSERT INTO `color` VALUES ('117', '93,81,60', '黑中带黄的颜色', '黝');
INSERT INTO `color` VALUES ('118', '57,47,65', '深黑', '乌黑');
INSERT INTO `color` VALUES ('119', '22,24,35', '非常黑的', '漆黑');
INSERT INTO `color` VALUES ('120', '240,240,244', '铅粉的白色。铅粉，国画颜料，日久易氧化“返铅”变黑。铅粉在古时用以搽脸的化妆品。 （注：冷白）', '玄青');
INSERT INTO `color` VALUES ('121', '238,222,176', '与像牙相似的淡黄色（注：暖白）', '牙色');
INSERT INTO `color` VALUES ('122', '128,128,128', '黑色和白色混和成的一种颜色', '灰色');
INSERT INTO `color` VALUES ('123', '227,239,253', '晶莹洁白', '莹白');
INSERT INTO `color` VALUES ('124', '252,239,232', '似鱼腹部的颜色，多指黎明时东方的天色颜色', '鱼肚白');
INSERT INTO `color` VALUES ('125', '194,204,208', '白色和黑色混杂的。斑白的 夹杂有灰色的白', '花白');
INSERT INTO `color` VALUES ('126', '233,241,246', '白霜的颜色', '霜色');
INSERT INTO `color` VALUES ('127', '242,190,69', '足金的颜色', '赤金');
INSERT INTO `color` VALUES ('128', '98,42,29', '赤黑色，黑中带红的颜色，又泛指黑色', '玄色');
INSERT INTO `color` VALUES ('129', '117,138,153', '即黑灰', '墨灰');

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` bigint(20) NOT NULL auto_increment,
  `article_id` bigint(20) default NULL,
  `comment_content` varchar(255) default NULL,
  `comment_date` datetime default NULL,
  `comment_nickname` varchar(255) default NULL,
  `comment_user` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  PRIMARY KEY  (`id`),
  KEY `FK38A5EE5FEE5D3F84` (`article_id`),
  CONSTRAINT `FK38A5EE5FEE5D3F84` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('24', null, '一本传统意义的 Mac 用户手册或技术书籍，没啥技术深度，思想也不深刻，只是一个70后程序员，在微信平台讲述技术与人文的故事', '2014-03-31 17:36:26', '乔峰', null, 'qiaofeng@126.com');
INSERT INTO `comment` VALUES ('25', '7', '他对HTTP、Web API、REST、DDD和概念模型抱有极大的热情。而在处理实际的业务问题上又坚持实用性。', '2014-03-31 21:55:58', '小白', null, 'xiao@126.com');
INSERT INTO `comment` VALUES ('26', '7', '他在这一行已有12年以上的经验，并在多个优秀企业工作过。', '2014-03-31 22:04:10', '小明', null, 'xiaoming@126.com');
INSERT INTO `comment` VALUES ('27', '7', '程调用风格的资源。所有这些都', '2014-03-31 22:18:31', '小刚', null, 'xiaoao@12.com');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL auto_increment,
  `avatar` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `nickname` varchar(255) default NULL,
  `password` varchar(255) default NULL,
  `username` varchar(255) default NULL,
  `blog_id` bigint(20) default NULL,
  PRIMARY KEY  (`id`),
  KEY `FK36EBCB7474B930` (`blog_id`),
  CONSTRAINT `FK36EBCB7474B930` FOREIGN KEY (`blog_id`) REFERENCES `blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', '1c4ca4238a0b923820dcc509a6f75849b.jpg', null, 'admin', 'c4ca4238a0b923820dcc509a6f75849b', 'admin', null);
